{"version":3,"sources":["Developer.js","Writer.js","Player.js","Linguist.js","App.js","serviceWorker.js","index.js"],"names":["Developer","props","Open","state","open","setState","gitLink","console","log","className","onClick","this","React","Component","Writer","passage","Player","Linguist","asl","App","id","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTAkCeA,G,uDA7BP,WAAYC,GAAO,IAAD,8BAClB,cAAMA,IAOVC,KAAO,YACqB,IAApB,EAAKC,MAAMC,MACX,EAAKC,SAAS,CAAED,MAAM,EAAME,QAAS,aACrCC,QAAQC,IAAI,QAGZ,EAAKH,SAAS,CAAED,MAAM,EAAOE,QAAS,KACtCC,QAAQC,IAAI,SAbhB,EAAKL,MAAQ,CACTC,MAAM,EACNE,QAAS,IAJK,E,qDAoBlB,OACA,yBAAKG,UAAU,MAAMC,QAASC,KAAKT,MACnC,0CAAgBS,KAAKR,MAAMG,c,GAxBXM,IAAMC,YC+BfC,G,wDA7BP,WAAYb,GAAO,IAAD,8BAClB,cAAMA,IAOVC,KAAO,YACqB,IAApB,EAAKC,MAAMC,MACX,EAAKC,SAAS,CAAED,MAAM,EAAMW,QAAS,2DACrCR,QAAQC,IAAI,QAGZ,EAAKH,SAAS,CAAED,MAAM,EAAOW,QAAS,KACtCR,QAAQC,IAAI,SAbhB,EAAKL,MAAQ,CACTC,MAAM,EACNW,QAAS,IAJK,E,qDAoBlB,OACA,yBAAKN,UAAU,MAAMC,QAASC,KAAKT,MACnC,uCAAaS,KAAKR,MAAMY,c,GAxBXH,IAAMC,YC+BZG,E,kDA7BP,WAAYf,GAAO,IAAD,8BAClB,cAAMA,IAOVC,KAAO,YACqB,IAApB,EAAKC,MAAMC,MACX,EAAKC,SAAS,CAAED,MAAM,EAAME,QAAS,cACrCC,QAAQC,IAAI,QAGZ,EAAKH,SAAS,CAAED,MAAM,EAAOE,QAAS,KACtCC,QAAQC,IAAI,SAbhB,EAAKL,MAAQ,CACTC,MAAM,EACNE,QAAS,IAJK,E,qDAoBlB,OACA,yBAAKG,UAAU,MAAMC,QAASC,KAAKT,MACnC,uCAAaS,KAAKR,MAAMG,c,GAxBXM,IAAMC,WC2BZI,G,wDA1Bb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAORC,KAAO,WACL,IAAIgB,EAAM,0BAAMT,UAAU,OAAhB,SACc,IAApB,EAAKN,MAAMC,KACb,EAAKC,SAAS,CAAED,MAAM,EAAME,QAASY,IAErC,EAAKb,SAAS,CAAED,MAAM,EAAOE,QAAS,MAXxC,EAAKH,MAAQ,CACXC,MAAM,EACNE,QAAS,IAJM,E,qDAkBjB,OACE,yBAAKG,UAAU,MAAMC,QAASC,KAAKT,MACjC,yCAAeS,KAAKR,MAAMG,c,GArBXM,IAAMC,YCwCdM,MApCf,WACE,OACE,6BACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,QACb,qCACA,uCAEF,yBAAKW,GAAG,OACN,kBAAC,EAAD,OAEF,yBAAKA,GAAG,UACN,2BACE,kBAAC,EAAD,QAGJ,yBAAKA,GAAG,UACN,2BACE,kBAAC,EAAD,QAGJ,yBAAKA,GAAG,YACN,2BACE,kBAAC,EAAD,OAEF,yBAAKX,UAAU,WACb,uBAAGA,UAAU,UAAUY,KAAK,iCAA5B,gBCrBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ddf8de76.chunk.js","sourcesContent":["import React from 'react';\nimport './Developer.css';\n\nclass Developer extends React.Component\n{\n        constructor(props){\n        super(props);\n        this.state = { \n            open: false,\n            gitLink: \"\"\n        }\n    }\n\n    Open = () => {\n        if (this.state.open === false) {\n            this.setState({ open: true, gitLink: \"| GITHUB\" })\n            console.log(\"HI\")\n        }\n        else {\n            this.setState({ open: false, gitLink: \"\" })\n            console.log(\"BYE\")      \n        }\n    }\n\n    render(){\n        return(\n        <div className=\"dev\" onClick={this.Open}>\n        <div>Developer {this.state.gitLink}</div>\n        </div>\n        )\n    }\n}\n\n\nexport default Developer;","import React from 'react';\nimport './Writer.css';\n\nclass Writer extends React.Component\n{\n        constructor(props){\n        super(props);\n        this.state = { \n            open: false,\n            passage: \"\"\n        }\n    }\n\n    Open = () => {\n        if (this.state.open === false) {\n            this.setState({ open: true, passage: \"| For each the thought of nothing was what broke them.\" })\n            console.log(\"HI\")\n        }\n        else {\n            this.setState({ open: false, passage: \"\" })\n            console.log(\"BYE\")      \n        }\n    }\n\n    render(){\n        return(\n        <div className=\"dev\" onClick={this.Open}>\n        <div>Writer {this.state.passage}</div>\n        </div>\n        )\n    }\n}\n\n\nexport default Writer;","import React from 'react';\nimport './Developer.css';\n\nclass Player extends React.Component\n{\n        constructor(props){\n        super(props);\n        this.state = { \n            open: false,\n            gitLink: \"\"\n        }\n    }\n\n    Open = () => {\n        if (this.state.open === false) {\n            this.setState({ open: true, gitLink: \"| IMPROV!\" })\n            console.log(\"HI\")\n        }\n        else {\n            this.setState({ open: false, gitLink: \"\" })\n            console.log(\"BYE\")      \n        }\n    }\n\n    render(){\n        return(\n        <div className=\"dev\" onClick={this.Open}>\n        <div>Player {this.state.gitLink}</div>\n        </div>\n        )\n    }\n}\n\n\nexport default Player;","import React from \"react\";\nimport \"./Linguist.css\";\n\nclass Linguist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      gitLink: \"\"\n    };\n  }\n\n  Open = () => {\n    let asl = <span className=\"asl\"> HII</span>;\n    if (this.state.open === false) {\n      this.setState({ open: true, gitLink: asl });\n    } else {\n      this.setState({ open: false, gitLink: \"\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"dev\" onClick={this.Open}>\n        <div>Linguist {this.state.gitLink}</div>\n      </div>\n    );\n  }\n}\n\nexport default Linguist;\n","import React from \"react\";\nimport \"./App.css\";\nimport Developer from \"./Developer\";\nimport Writer from \"./Writer\";\nimport Player from \"./Player\";\nimport Linguist from \"./Linguist\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <div className=\"fade\">\n          <h1>MERCY</h1>\n          <h1>ODHNER</h1>\n        </div>\n        <div id=\"dev\">\n          <Developer />\n        </div>\n        <div id=\"writer\">\n          <p>\n            <Writer />\n          </p>\n        </div>\n        <div id=\"player\">\n          <p>\n            <Player />\n          </p>\n        </div>\n        <div id=\"linguist\">\n          <p>\n            <Linguist />\n          </p>\n          <div className=\"contact\">\n            <a className=\"contact\" href=\"mailto:mercyeodhner.gmail.com\">\n              contact\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}